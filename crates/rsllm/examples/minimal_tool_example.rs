//! Minimal Tool Example - The Absolute Minimum Code!
//!
//! This shows the MINIMUM code needed to create a working tool.
//! Perfect for beginners and quick prototyping.
//!
//! Run with: cargo run -p rsllm --example minimal_tool_example --all-features

use rsllm::tool;
use rsllm::tools::ToolRegistry;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
use serde_json::json;
use std::error::Error;

// ============================================================================
// STEP 1: Define your parameters
// ============================================================================

#[derive(JsonSchema, Serialize, Deserialize)]
pub struct AddParams {
    /// First number to add
    pub a: f64,
    /// Second number to add
    pub b: f64,
}

// ============================================================================
// STEP 2: Define your result
// ============================================================================

#[derive(JsonSchema, Serialize, Deserialize)]
pub struct AddResult {
    pub sum: f64,
}

// ============================================================================
// STEP 3: Write your function with #[tool]
// ============================================================================

#[tool(description = "Adds two numbers")]
fn add(params: AddParams) -> Result<AddResult, Box<dyn Error + Send + Sync>> {
    Ok(AddResult {
        sum: params.a + params.b,
    })
}

// ============================================================================
// THAT'S IT! Total: 15 lines of code
// ============================================================================

fn main() -> Result<(), Box<dyn Error>> {
    println!("🎯 Minimal Tool Example");
    println!("========================\n");

    // Use your tool
    let mut registry = ToolRegistry::new();
    registry.register(Box::new(AddTool))?;  // Auto-generated by macro!

    println!("✅ Tool registered: add\n");

    // Execute it
    let result = registry.execute(&rsllm::tools::ToolCall::new(
        "test",
        "add",
        json!({"a": 10, "b": 20}),
    ));

    println!("🚀 Execution:");
    println!("   Input: a=10, b=20");
    println!("   Result: {}", result.content);

    println!("\n📝 Code breakdown:");
    println!("   Line 1-4:   Define params struct (4 lines)");
    println!("   Line 5-8:   Define result struct (4 lines)");
    println!("   Line 9-13:  Write function with #[tool] (5 lines)");
    println!("   ───────────────────────────────────────");
    println!("   Total: 13 lines of actual code!");

    println!("\n✨ That's it! You have a working tool!");
    println!("   • Automatic JSON schema generation");
    println!("   • Type-safe parameters");
    println!("   • Full validation");
    println!("   • Ready to use with any LLM!");

    Ok(())
}
